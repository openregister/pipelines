---
resource_types:
- name: s3-paas
  type: docker-image
  source:
    repository: governmentpaas/s3-resource
- name: concourse-pipeline
  type: docker-image
  source:
    repository: concourse/concourse-pipeline-resource

resources:
- name: registers-cli
  type: git
  source:
    uri: https://github.com/openregister/registers-cli.git
    branch: master

- name: registry-data
  type: git
  source:
    uri: https://github.com/openregister/registry-data.git
    branch: master
    paths:
    - rsf

- name: conformance-test
  type: git
  source:
    uri: https://github.com/openregister/conformance-test.git
    branch: master

- name: pipelines
  type: git
  source:
    uri: https://github.com/openregister/pipelines.git
    branch: master

- name: route-service
  type: git
  source:
    uri: https://github.com/openregister/route-service.git
    branch: master

- name: registers
  type: s3-paas
  source:
    bucket: ((readonly_private_bucket_name))
    regexp: registers/(.*).tgz
    initial_path: registers/0.tgz
    region_name: eu-west-2

- &cf-resource
  name: paas-app
  type: cf
  source:
    api: https://api.london.cloud.service.gov.uk
    organization: gds-registers
    space: registers
    username: ((paas-user))
    password: ((paas-password))

- <<: *cf-resource
  name: paas-route-service

- name: cd
  type: concourse-pipeline
  source:
    teams:
      - name: register
        username: register
        password: ((readonly_local_user_password))

images:
  python: &python-image
    type: docker-image
    source:
      repository: python
      tag: 3-slim
  ruby: &ruby-image
    type: docker-image
    source: 
      repository: ruby
      tag: slim
  go: &go-image
    type: docker-image
    source:
      repository: golang
      tag: 1.12-stretch
  go: &cf-image
    type: docker-image
    source:
      repository: governmentpaas/cf-cli

jobs:
- name: update
  plan:
    - get: pipelines
      trigger: true
    - put: cd
      params:
        pipelines:
          - name: deploy
            team: register
            config_file: pipelines/deploy.yaml

- name: build
  plan:
  - get: registers-cli
    trigger: true
  - get: registry-data
    trigger: true
  - task: build-registers
    config:
      platform: linux
      image_resource: *python-image
      inputs:
        - name: registers-cli
        - name: registry-data
      outputs:
        - name: archive
      run:
        path: sh
        dir: registers-cli
        args:
          - -uec
          - |
            pip install .
            mkdir -p output
            # compile all registers
            registers build ../registry-data/rsf/*.rsf
            # save canonical list of current registers
            cat build/register/items/index.json \
              | python -c 'import json, sys; print("\n".join(i[1]["register"] for i in json.load(sys.stdin).items()))' \
              > output/registers.txt
            cp -r build output/public
            cp -r registers/data/nginx/lua output/
            cp registers/data/nginx/mime.types output/
            cp registers/data/cloudfoundry/buildpack.yml output/
            tar -czf ../archive/registers-$(date +%s).tgz -C output .
  - put: registers
    params: { file: archive/registers-*.tgz }

- name: app
  plan:
  - get: pipelines
  - get: registers
    passed: [ build ]
    trigger: true
    params: { unpack: true }
  - task: build-manifest
    config:
      platform: linux
      image_resource: *ruby-image
      inputs:
        - name: pipelines
        - name: registers
      outputs:
        - name: registers
      run:
        path: sh
        args:
          - -uec
          - |
            pipelines/generate_manifest.rb registers/registers.txt registers/manifest.yml
            cp pipelines/nginx.conf registers/nginx.conf
  - put: paas-app
    params:
      current_app_name: registers
      manifest: registers/manifest.yml
      path: registers

- name: route-service
  plan:
    - get: route-service
      trigger: true
    - task: run-tests
      config:
        platform: linux
        image_resource: *go-image
        inputs:
          - name: route-service
        run:
          dir: route-service
          path: go
          args: [ "test", "./..." ]
    - put: paas-route-service
      params:
        current_app_name: reg-rs
        manifest: route-service/manifest.yaml
        path: route-service

- name: routes
  plan:
    - get: registers
      passed: [ app ]
      trigger: true
      params: { unpack: true }
    - get: paas-route-service
      passed: [ route-service ]
    - task: bind-routes
      config:
        platform: linux
        image_resource: *cf-image
        inputs:
          - name: registers
        params:
          DOMAIN: london.cloudapps.digital
          PAAS_USER: ((paas-user))
          PAAS_PASSWORD: ((paas-password))
        run:
          path: bash
          args:
            - -c
            - |
              set -o errexit -o nounset -o pipefail
              cf login -u "$PAAS_USER" -p "$PAAS_PASSWORD" -a api.london.cloud.service.gov.uk -o gds-registers -s registers
              cf service route-service || cf create-user-provided-service route-service "https://reg-rs.${DOMAIN}"
              cat registers/registers.txt | xargs -n1 -IXX cf bind-route-service "${DOMAIN}" --hostname XX-reg route-service

- name: test
  plan:
    - get: paas-app
      passed: [ app ]
      trigger: true
    - get: paas-route-service
      passed: [ routes ]
      trigger: true
    - get: conformance-test
      trigger: true
    - get: registers
      passed: [ routes ]
      trigger: true
      params: { unpack: true }
    - task: run-test
      config:
        platform: linux
        image_resource: *python-image
        inputs:
          - name: conformance-test
          - name: registers
        params:
          DOMAIN: london.cloudapps.digital
        run:
          path: bash
          dir: conformance-test
          args:
            - -c
            - |
              set -o errexit -o nounset -o pipefail
              pip install -r requirements.txt
              cat ../registers/registers.txt | xargs -n1 -IXX ./openregister-conformance --api-version 1 --register XX --register-domain $DOMAIN https://XX-reg.${DOMAIN}
